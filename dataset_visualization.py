# -*- coding: utf-8 -*-
"""Dataset Visualization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hjCj1_Oa_XEZ-NOSthcvm2nbvAjnFYZf
"""

import pandas as pd
import numpy as np
from sklearn import metrics 
from sklearn.model_selection import train_test_split
import numpy as np #Data manipulation
import matplotlib.pyplot as plt # Visualization
import seaborn as sns #Visualization
plt.rcParams['figure.figsize'] = [8,5]
plt.rcParams['font.size'] =14
plt.rcParams['font.weight']= 'bold'
plt.style.use('seaborn-whitegrid')

from sklearn.linear_model           import LinearRegression
from sklearn.linear_model           import LogisticRegression
from sklearn.tree                   import DecisionTreeClassifier
from sklearn.neighbors              import KNeighborsClassifier
from sklearn.discriminant_analysis  import LinearDiscriminantAnalysis
from sklearn.naive_bayes            import GaussianNB
from sklearn.svm                    import SVC

from google.colab import files
 
 
uploaded = files.upload()

import pandas as pd
import io
 
df = pd.read_csv(io.BytesIO(uploaded['Untitled spreadsheet - Sheet2.csv']))
print(df.head())

print(df.shape)

sns.lmplot(x='vaccine: % hesitant',y='vaccine: shots',data=df,aspect=2,height=6)
plt.xlabel('Tweet Sentiment Score: as Independent variable')
plt.ylabel('Vaccine shots: as Dependent variable')
plt.title('Tweet Sentiment vs Vaccine Shots');

x = df.drop(["vaccine: shots",'date','region','covid cases'],axis = 1)
y = df["vaccine: shots"]
print(x,y)

x_train, x_test, y_train, y_test = train_test_split(x, y, random_state=4)

from sklearn import tree
decision_tree = tree.DecisionTreeRegressor()

decision_tree.fit(x_train, y_train)

y_pred = decision_tree.predict(x_test)

from sklearn.tree import plot_tree
plt.figure(figsize=(10,20), dpi=150)
plot_tree(decision_tree, feature_names=['tweet:sentiment score','vaccine: % hesitant','democratic','new covid case']);

from sklearn.metrics import r2_score,mean_squared_error
mse=mean_squared_error(y_test,y_pred)
rmse=np.sqrt(mse)
rmse

from sklearn.tree import export_graphviz
export_graphviz(decision_tree, out_file ='tree_structure.dot', feature_names = ['tweet:sentiment score','vaccine: % hesitant','democratic','new covid case'])

feature_name = "tweet:sentiment score"
target_name = "vaccine: shots"
data_train, target_train = df[[feature_name]], df[target_name]

import numpy as np

data_test = pd.DataFrame(np.arange(data_train[feature_name].min(),
                                   data_train[feature_name].max()),
                                   columns=[feature_name])

import matplotlib.pyplot as plt
import seaborn as sns

sns.scatterplot(data=df, x=feature_name, y=target_name,
                color="black", alpha=0.5)
_ = plt.title("Illustration of the Regression Dataset Used")

from sklearn.linear_model import LinearRegression

linear_model = LinearRegression()
linear_model.fit(data_train, target_train)
target_predicted = linear_model.predict(data_test)

sns.scatterplot(data=df, x=feature_name, y=target_name,
                color="black", alpha=0.5)
plt.plot(data_test[feature_name], target_predicted, label="Linear regression")
plt.legend()
_ = plt.title("Prediction function using a LinearRegression")

ax = sns.scatterplot(data=df, x=feature_name, y=target_name,
                     color="black", alpha=0.5)
plt.plot(data_test[feature_name], target_predicted, label="Linear regression",
         linestyle="--")
plt.scatter(data_test[::8987], target_predicted[::8987], label="Predictions",
            color="tab:orange")
plt.legend()
_ = plt.title("Prediction function using a LinearRegression")

from sklearn.tree import DecisionTreeRegressor

tree = DecisionTreeRegressor(max_depth=1)
tree.fit(data_train, target_train)
target_predicted = tree.predict(data_test)

sns.scatterplot(data=df, x=feature_name, y=target_name,
                color="black", alpha=0.5)
plt.plot(data_test[feature_name], target_predicted, label="Decision tree")
plt.legend()
_ = plt.title("Prediction function using a DecisionTreeRegressor")

from sklearn.tree import plot_tree

_, ax = plt.subplots(figsize=(8, 6))
_ = plot_tree(tree, feature_names=feature_name, ax=ax)

tree = DecisionTreeRegressor(max_depth=23)
tree.fit(data_train, target_train)
target_predicted = tree.predict(data_test)

sns.scatterplot(data=df, x=feature_name, y=target_name,
                color="black", alpha=0.5)
plt.plot(data_test[feature_name], target_predicted, label="Decision tree")
plt.legend()
_ = plt.title("Prediction function using a DecisionTreeRegressor")

